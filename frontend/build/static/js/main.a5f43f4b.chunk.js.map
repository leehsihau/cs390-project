{"version":3,"sources":["components/login.js","components/register.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleChange","name","event","setState","target","value","handleSubmit","a","preventDefault","loading","userData","email","state","password","axios","post","res","token","data","localStorage","setItem","loggedIn","console","log","error","getItem","jwt_decode","this","to","Container","Card","Body","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","Button","variant","disabled","Spinner","as","size","role","aria-hidden","Alert","React","Component","Home","password2","msg","logout","e","removeItem","user","get","headers","Authorization","response","header","onClick","App","className","path","block","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5f43f4b.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Redirect, Link } from \"react-router-dom\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      loading: false,\n      loggedIn: false,\n      error: \"\"\n    };\n  }\n  componentDidMount() {\n    let token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      console.log(\"token\", token);\n      const decoded = jwt_decode(token);\n      if (decoded) {\n        this.setState({ loggedIn: true });\n      }\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n\n    let userData = { email: this.state.email, password: this.state.password };\n\n    try {\n      const res = await axios.post(\"/api/login\", userData);\n\n      // Save to localStorage\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n\n      this.setState({ loading: false, loggedIn: true });\n    } catch (err) {\n      console.log(err);\n      this.setState({ loading: false, error: \"Login Failed\" });\n    }\n  };\n\n  render() {\n    if (this.state.loggedIn === true) {\n      return <Redirect to=\"/home\" />;\n    }\n\n    return (\n      <>\n        <Container>\n          <Card>\n            <Card.Body>\n              <p>\n                Back to <Link to=\"/\">Home</Link>\n              </p>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    value={this.state.email}\n                    onChange={this.handleChange(\"email\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={this.state.password}\n                    onChange={this.handleChange(\"password\")}\n                  />\n                </Form.Group>\n\n                {this.state.loading ? (\n                  <Button variant=\"primary\" disabled>\n                    <Spinner\n                      as=\"span\"\n                      size=\"sm\"\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                    />\n                    Loading...\n                  </Button>\n                ) : (\n                  <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                )}\n              </Form>\n              {this.state.error ? (\n                <Alert variant=\"danger\">{this.state.error}</Alert>\n              ) : (\n                <></>\n              )}\n            </Card.Body>\n          </Card>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Redirect, Link } from \"react-router-dom\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      loading: false,\n      error: \"\"\n    };\n  }\n  componentDidMount() {\n    let token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      console.log(\"token\", token);\n      console.log(token);\n      const decoded = jwt_decode(token);\n      if (decoded) {\n        this.setState({ loggedIn: true });\n      }\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n\n    if (this.state.password != this.state.password2) {\n      this.setState({ loading: false, msg: \"Passwords don't match\" });\n    } else {\n      let userData = {\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password\n      };\n\n      try {\n        const res = await axios.post(\"/api/register\", userData);\n\n        this.setState({ loading: false, msg: \"Registration Successful.\" });\n      } catch (err) {\n        console.log(err);\n        this.setState({ loading: false, msg: \"Registration Failed.\" });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Container>\n          <Card>\n            <Card.Body>\n              <p>\n                Back to <Link to=\"/\">Home</Link>\n              </p>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter name\"\n                    value={this.state.name}\n                    onChange={this.handleChange(\"name\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    value={this.state.email}\n                    onChange={this.handleChange(\"email\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={this.state.password}\n                    onChange={this.handleChange(\"password\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Confirm Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                    value={this.state.password2}\n                    onChange={this.handleChange(\"password2\")}\n                  />\n                </Form.Group>\n\n                {this.state.loading ? (\n                  <Button variant=\"primary\" disabled>\n                    <Spinner\n                      as=\"span\"\n                      size=\"sm\"\n                      role=\"status\"\n                      aria-hidden=\"true\"\n                    />\n                    Loading...\n                  </Button>\n                ) : (\n                  <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                )}\n              </Form>\n              {this.state.msg ? (\n                <Alert variant=\"danger\">{this.state.msg}</Alert>\n              ) : (\n                <></>\n              )}\n            </Card.Body>\n          </Card>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default Home;\n","import Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Button from \"react-bootstrap/Button\";\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      user: null,\n      loggedIn: false,\n      msg: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    const token = localStorage.getItem(\"jwtToken\");\n    if (!token) {\n      this.setState({\n        loading: false,\n        loggedIn: false\n      });\n    } else if (this.state.loading) {\n      try {\n        const response = await axios.get(\"/api/protected\", {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        console.log(response.data);\n        this.setState({\n          loading: false,\n          loggedIn: true,\n          user: jwt_decode(token, { header: true }),\n          msg: response.data.msg\n        });\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          loading: false,\n          loggedIn: true,\n          user: jwt_decode(token, { header: true }),\n          msg: \"The protected route failed :( Check console for errors\"\n        });\n      }\n    }\n  }\n\n  logout = e => {\n    e.preventDefault();\n    localStorage.removeItem(\"jwtToken\");\n    this.setState({ loggedIn: false });\n  };\n\n  render() {\n    if (!this.state.loading && !this.state.loggedIn) {\n      return <Redirect to=\"/login\" />;\n    }\n\n    if (this.state.loading) {\n      return <Spinner as=\"span\" size=\"lg\" role=\"status\" aria-hidden=\"true\" />;\n    }\n\n    return (\n      <Container>\n        <Card>\n          <Card.Body>{this.state.msg}</Card.Body>\n          <Button variant=\"primary\" type=\"submit\" onClick={this.logout}>\n            Logout\n          </Button>\n        </Card>\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/login\";\nimport Register from \"./components/register\";\nimport Home from \"./components/home\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"auth-box\">\n          <Switch>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n            <Route path=\"/register\">\n              <Register />\n            </Route>\n            <Route path=\"/home\">\n              <Home />\n            </Route>\n            <Route path=\"/\">\n              <Container>\n                <Card>\n                  <Card.Body>\n                    <LinkContainer to=\"/login\">\n                      <Button variant=\"primary\" size=\"lg\" block>\n                        Login\n                      </Button>\n                    </LinkContainer>\n                    <LinkContainer to=\"/register\">\n                      <Button variant=\"primary\" size=\"lg\" block>\n                        Register\n                      </Button>\n                    </LinkContainer>\n                  </Card.Body>\n                </Card>\n              </Container>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}